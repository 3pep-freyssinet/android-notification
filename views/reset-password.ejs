<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Reset Your Password</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      background-color: #f4f4f4;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
      font-size: 24px;
      color: #333;
    }

    #resetForm {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 90%;
      max-width: 600px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      color: #555;
    }

    input[type="password"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 16px;
    }

    button[type="submit"] {
      width: 100%;
      padding: 10px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
    }

    button[type="submit"]:hover {
      background-color: #0056b3;
    }

    .error, .success {
      margin-top: 20px;
      text-align: center;
      padding: 10px;
      border-radius: 4px;
      width: 90%;
      max-width: 600px;
    }

    .error {
      background-color: #ffebee;
      color: #c62828;
    }

    .success {
      background-color: #e8f5e9;
      color: #2e7d32;
    }

    .hidden {
      display: none;
    }

input:disabled, button:disabled {
  background-color: #f0f0f0;
  color: #a0a0a0;
  cursor: not-allowed;
}
  </style>
</head>
<body>
  <h1>Reset Your Password</h1>
  <!-- Password Reset Form -->
  <form id="resetForm" class="hidden">
    <label for="newPassword">New Password:</label><br>
    <input type="password" id="newPassword" name="newPassword" required><br><br>
    
    <label for="confirmPassword">Confirm New Password:</label><br>
    <input type="password" id="confirmPassword" name="confirmPassword" required><br><br>
    
    <button type="submit"  id="resetPasswordButton">Reset Password</button>
  </form>
<!-- A container to show error messages -->
  <div id="errorMessage" class="error"></div>

<!-- A container to show success messages -->
  <div id="successMessage" class="success"></div>
  
  <script>
    // Parse query parameters
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const userId = urlParams.get('userId');

    document.getElementById('resetPasswordButton').disabled = true;
    document.getElementById('newPassword').disabled = true;
    document.getElementById('confirmPassword').disabled = true;

    if (!token || !userId) {
      document.getElementById('errorMessage').textContent = "Invalid reset link.";
    } else {
     // Verify the token with the backend before showing the form
      fetch('/users/verify-reset-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token, userId })
      })
      .then(response => {
         if (!response.ok) {
            throw new Error(`Server error: ${response.status} ${response.statusText}`);
         }
       return response.json();
       })
      .then(data => {
        if (data.success) {
          // Token is valid, show the reset form
          document.getElementById('resetForm').classList.remove('hidden');
          document.getElementById('newPassword').disabled = false;

          //document.getElementById('successMessage').classList.remove('hidden');
          //document.getElementById('successMessage').textContent = data.message;
        } else {
          document.getElementById('errorMessage').classList.remove('hidden');
          document.getElementById('errorMessage').textContent = data.message || "Invalid or expired token.";
        }
      })
      .catch(error => {
         document.getElementById('errorMessage').classList.remove('hidden');
         document.getElementById('errorMessage').textContent = "An error occurred. Please try again later.";
      });

      //handle changes in 'newPassword'
      const newPasswordInput = document.getElementById('newPassword');
      newPasswordInput.addEventListener('input', (event) => {
          const password = event.target.value; // Get the current value of the input
          //console.log('User is typing:', password);
          
          if (password.length > 0) {
            //enable 'confirmPassword' input text
            document.getElementById('confirmPassword').disabled = false;
            document.getElementById('errorMessage').textContent = "";
            //document.getElementById('successMessage').value = '';
          }

         // Example: Check if the password is at least 8 characters long
         if (password.length >= 8) {
           console.log('Password is valid (at least 8 characters).');
          // You can update the UI to indicate success (e.g., change border color)
          newPasswordInput.style.borderColor = 'green';
        } else {
          //console.log('Password is too short.');
          // Update the UI to indicate an error (e.g., change border color)
          newPasswordInput.style.borderColor = 'red';
        }

          // You can perform additional actions here, such as:
          // - Validating the password in real-time
          // - Updating a character counter
          // - Enabling/disabling other elements based on the input
       });

      //handle changes in 'confirmPassword'
      const confirmPassword = document.getElementById('confirmPassword');
      confirmPassword.addEventListener('input', (event) => {
          const password = event.target.value; // Get the current value of the input
          //console.log('User is typing:', password);
          
          if (password.length > 0) {
            //enable 'resetPasswordButton' button
            document.getElementById('resetPasswordButton').disabled = false;
          }
       });

      // Handle form submission
      document.getElementById('resetForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (newPassword !== confirmPassword) {
          document.getElementById('errorMessage').textContent = "Passwords do not match.";
          document.getElementById('newPassword').disabled = false;
          document.getElementById('confirmPassword').disabled = true;
          document.getElementById('resetPasswordButton').disabled = true;

          //document.getElementById('errorMessage').textContent = '';
          //document.getElementById('successMessage').textContent = 'aaaaaaaa';
          document.getElementById('newPassword').value = '';
          document.getElementById('confirmPassword').value = '';

          return;
        }

        //Passwords match, allow submit button and clear 'errorMessage'.
        document.getElementById('resetPasswordButton').disabled = false;
        document.getElementById('errorMessage').value = '';
        document.getElementById('newPassword').disabled = true;
        document.getElementById('confirmPassword').disabled = true;

       // Send the new password to backend to update
        fetch('/users/reset-password', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token, userId, newPassword }),
            })
         .then(response => {
           if (!response.ok) {
             throw new Error(`Server error: ${response.status} ${response.statusText}`);
           }
           return response.json();
         })
        .then(data => {
          document.getElementById('errorMessage').textContent = JSON.stringify(data);
          //const s = JSON.stringify(data);
          document.getElementById('errorMessage').textContent =  JSON.stringify(data) + data.success;

          if (data.success) {
            //document.body.innerHTML = "<h2>Password reset successfully!</h2>";
             //alert('Password reset : data : ' + data.message);
            //console.log('data : ', data.message);
            document.getElementById('successMessage').textContent = data.message;

            //Disable items
            document.getElementById('newPassword').disabled = true;
            document.getElementById('confirmPassword').disabled = true;
            document.getElementById('resetPasswordButton').disabled = true;
            
            // Affiche un lien pour ouvrir LoginActivity
                const loginLink = document.createElement('a');
                loginLink.href = data.loginLink;
                loginLink.textContent = 'Return to Login';

                const container = document.createElement('div'); // Create a container div
                container.style.textAlign = 'center'; // Center the content inside it

                // Add a line break between the success message and the container
                const lineBreak = document.createElement('br');

                container.appendChild(loginLink); // Append the link inside the container

                loginLink.onclick = (e) => {
                    e.preventDefault();
                    window.location.href = data.loginLink; // Ouvre le Deep Link
                };

                document.getElementById('successMessage').appendChild(lineBreak);
                document.getElementById('successMessage').appendChild(container);
             
          } else {
               // Affiche un message d'erreur
                document.getElementById('errorMessage').textContent = data.message;
          }
        })
        .catch(error => {
          document.getElementById('errorMessage').textContent = "An error occurred. Please try again.";
        });
      });//end function (e)
  
  }//end else
  </script>
</body>
</html>
