<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Reset Your Password</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      background-color: #f4f4f4;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
      font-size: 24px;
      color: #333;
    }

    #resetForm {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 90%;
      max-width: 600px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      color: #555;
    }

    input[type="password"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 16px;
    }

    button[type="button"] {
      width: 100%;
      padding: 10px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 4px;
      font-weight: bold;
      font-size: 16px;
      cursor: pointer;
    }

    button[type="button"]:hover {
      background-color: #0056b3;
    }

    .error, .success {
      margin-top: 20px;
      text-align: center;
      padding: 10px;
      border-radius: 4px;
      width: 90%;
      max-width: 600px;
    }

    .error {
      background-color: #ffebee;
      color: #c62828;
    }

    .success {
      background-color: #e8f5e9;
      color: #2e7d32;
    }

    .hidden {
      display: none;
    }

input:disabled, button:disabled {
  background-color: #f0f0f0;
  color: #a0a0a0;
  cursor: not-allowed;
}
  </style>
</head>
<body>
  <h1>Reset Your Password</h1>
  <!-- Password Reset Form -->
  <form id="resetForm" class="hidden">
    <label for="newPassword">New Password:</label><br>
    <input type="password" id="newPassword" name="newPassword" required><br><br>
    
    <label for="confirmPassword">Confirm New Password:</label><br>
    <input type="password" id="confirmPassword" name="confirmPassword" required><br><br>
    
    <!-- <button type="submit"  id="resetPasswordButton">Reset Password</button> -->
    <button type="button" id="resetPasswordButton">Reset Password</button>  <!-- type="button" prevents submit -->
  </form>
<!-- A container to show error messages -->
  <div id="errorMessage" class="error"></div>

<!-- A container to show success messages -->
  <div id="successMessage" class="success"></div>
  
  <script>
    // Parse query parameters
    const urlParams   = new URLSearchParams(window.location.search);
    const token       = urlParams.get('token');
    const userId      = urlParams.get('userId');
    let retryCount    = 0;
    const MAX_RETRIES = 3; // Prevent brute-forcing

    if (!token || !userId) {
      document.getElementById('errorMessage').textContent = "Invalid reset link.";
      //show dialog
    } else {
	 // Verify the token with the backend before showing the form
	  fetch('/users/verify-reset-token', {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify({ token, userId })
	  })
	  .then(response => {
		 if (!response.ok) {
			throw new Error(`Server error: ${response.status} ${response.statusText}`);
		 }
	   return response.json();
	   })
	  .then(data => {
		 document.getElementById('errorMessage').classList.remove('hidden');
                  
			if (data.success) {
			  // Token is valid, show the reset form
			  document.getElementById('resetForm').classList.remove('hidden');

			  document.getElementById('resetPasswordButton').disabled = true;
                          document.getElementById('newPassword').disabled = false;
                          document.getElementById('confirmPassword').disabled = true;

			  //document.getElementById('successMessage').classList.remove('hidden');
			  //document.getElementById('successMessage').textContent = data.message;
			} else {
			  
			  document.getElementById('errorMessage').textContent = data.message || "Invalid or expired token.";
                          //show dialog
			}
		  })
		  .catch(error => {
			 //document.getElementById('errorMessage').classList.remove('hidden');
			 document.getElementById('errorMessage').textContent = "An error occurred. Please try again later.";
                         //show dialog
		  });
                 /////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //handle changes in 'newPassword': lenght, ...
		  const newPasswordInput = document.getElementById('newPassword');
		  newPasswordInput.addEventListener('input', (event) => {
			  const password = event.target.value; // Get the current value of the input
			  //console.log('User is typing:', password);

			  document.getElementById('resetPasswordButton').disabled = true;
                          document.getElementById('confirmPassword').disabled = true;
			  document.getElementById('errorMessage').value = ''; //clear any error message
			  if (password.length > 0) {
				//enable 'confirmPassword' input text
				document.getElementById('confirmPassword').disabled = false;
				document.getElementById('errorMessage').textContent = "";
				//document.getElementById('successMessage').value = '';
			  }

			 // Example: Check if the password is at least 8 characters long
			 if (password.length >= 8) {
			   console.log('Password is valid (at least 8 characters).');
			  // You can update the UI to indicate success (e.g., change border color)
			  newPasswordInput.style.borderColor = 'green';
			} else {
			  //console.log('Password is too short.');
			  // Update the UI to indicate an error (e.g., change border color)
			  newPasswordInput.style.borderColor = 'red';
			}

			  // You can perform additional actions here, such as:
			  // - Validating the password in real-time
			  // - Updating a character counter
			  // - Enabling/disabling other elements based on the input
			});

      //handle changes in 'confirmPassword': length, ...
      const confirmPassword = document.getElementById('confirmPassword');
      confirmPassword.addEventListener('input', (event) => {
          const password = event.target.value; // Get the current value of the input
          //console.log('User is typing:', password);
          document.getElementById('resetPasswordButton').disabled = true;
          if (password.length > 0) {
            //enable 'resetPasswordButton' button
            document.getElementById('resetPasswordButton').disabled = false;
          }
       });
//////////////////////////////////////////////////////////////////////////////////////////////
      // Attach the function 'handleResetPassword' to the button click.
      //document.getElementById("resetPasswordButton").addEventListener("click", handleResetPassword(token, userId));
      document.getElementById("resetPasswordButton").addEventListener("click", () => {
      	 handleResetPassword(token, userId);
      });

      // Handle form submission, it is done by button click
      //document.getElementById('resetForm').addEventListener('submit', function(e) {
      //  e.preventDefault();
      //handleResetPassword(token, userId);
      //});
  }//end else if (!token || !userId) 
  //////////////////////////////////////////////////////////////////////////////
  // handle Reset Password Button
  async function handleResetPassword(token, userId) {
  const newPassword     = document.getElementById("newPassword").value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  
  if (!newPassword || !confirmPassword) {
     document.getElementById('errorMessage').textContent = "Please fill in both password fields.";
     document.getElementById('newPassword').disabled = false;
     document.getElementById('confirmPassword').disabled = true;
     document.getElementById('resetPasswordButton').disabled = true;
  return;
}

  if (newPassword !== confirmPassword) {//no match
	  document.getElementById('errorMessage').textContent = "Passwords do not match.";
	  document.getElementById('newPassword').disabled = false;
	  document.getElementById('confirmPassword').disabled = true;
	  document.getElementById('resetPasswordButton').disabled = true;

	  //document.getElementById('errorMessage').textContent = '';
	  //document.getElementById('successMessage').textContent = '';
	  document.getElementById('newPassword').value = '';
	  document.getElementById('confirmPassword').value = '';

	return;
 }
	//Passwords match, allow submit button and clear 'errorMessage'.
	document.getElementById('resetPasswordButton').disabled = false;
	document.getElementById('errorMessage').value = '';
	document.getElementById('newPassword').disabled = false;
	document.getElementById('confirmPassword').disabled = true;


  if (retryCount >= MAX_RETRIES) {
    //alert("Too many attempts. Please try again later.");
    document.getElementById('errorMessage').textContent = "Too many attempts. Please try again later."
   //show dialog
    return;
  }

  try {
    const response = await fetch('/users/reset-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token, userId, newPassword }),
    });

    const data = await response.json();

    // ðŸ”´ CASE 1: Status 200 (Success)
    if (response.status === 200) {
      if (data.success) {
        // ðŸ”´ SUCCESS: Password reset completed. Redirect to 'LoginActivity'
        // Success!
		//document.getElementById('successMessage').textContent = "The new password is set successfully."
		//window.location.href = "/success";
		document.getElementById('successMessage').textContent = data.message;

		//Disable items
		document.getElementById('newPassword').disabled = true;
		document.getElementById('confirmPassword').disabled = true;
		document.getElementById('resetPasswordButton').disabled = true;
            
	   // display a link to redirect to 'LoginActivity'
		const loginLink = document.createElement('a');
		loginLink.href = data.loginLink;
		loginLink.textContent = 'Return to Login';

		const container = document.createElement('div'); // Create a container div
		container.style.textAlign = 'center'; // Center the content inside it

		// Add a line break between the success message and the container
		const lineBreak = document.createElement('br');

		container.appendChild(loginLink); // Append the link inside the container

		loginLink.onclick = (e) => {
			e.preventDefault();
			window.location.href = data.loginLink; // Ouvre le Deep Link
		};

		document.getElementById('successMessage').appendChild(lineBreak);
		document.getElementById('successMessage').appendChild(container)
      } else {
        // ðŸ”´ SOFT FAILURE: Business logic failure (e.g., password reuse)
        document.getElementById('errorMessage').textContent = data.message ; //"New password cannot match previous ones."
        document.getElementById("newPassword").value = "";     // Clear input
        document.getElementById("newPassword").disabled = true;
        
        document.getElementById("confirmPassword").value = ""; // Clear input
        document.getElementById("confirmPassword").disabled = true;

        document.getElementById("resetPasswordButton").disabled = true; // Force change
        
        retryCount++; 
        showPasswordReuseDialog(token, userId, data);
      }
    }
    // ðŸ”´ CASE 2: Status 400/402/409 (Client Errors)
    else if ([400, 402, 409].includes(response.status)) {
      // ðŸ”´ CLIENT ERROR: Invalid input, expired token, etc.
      document.getElementById('errorMessage').textContent = data.message || "Invalid request. Please try again.";
    }
    // ðŸ”´ CASE 3: Status 500 (Server Error)
    else if (response.status === 500) {
      // ðŸ”´ SERVER ERROR: Retry or show maintenance message
      document.getElementById('errorMessage').textContent = "Server error. Please try again later.";
    }
    // ðŸ”´ CASE 4: Other Status Codes (Fallback)
    else {
      // ðŸ”´ UNHANDLED STATUS: Generic error
      document.getElementById('errorMessage').textContent = `Unexpected error (${response.status}).`;
    }
  } catch (error) {
    // ðŸ”´ NETWORK/UNEXPECTED ERRORS (e.g., fetch failed)
    document.getElementById('errorMessage').textContent = "Network error. Check your connection.";
    console.error("Fetch error:", error);
  }
}// end 'handleResetPasswords'
///////////////////////////////////////////////////////////////////////////////////////////
function showPasswordReuseDialog(token, userId, data) {
  const dialog = document.createElement("div");
  dialog.style.padding = "20px";
  dialog.style.border = "1px solid #ccc";
  dialog.style.borderRadius = "5px";
  dialog.style.backgroundColor = "#f9f9f9";

  const remainingTries  = MAX_RETRIES - retryCount;
  const shouldShowRetry = remainingTries > 0; // Hide if 0 tries left

  // Password reuse case
  showResponseDialog({
  	message: data.message,
  	status: data.status,
  	isSuccess: data.success,
  	showRetry: true,
  	remainingTries: remainingTries, //(MAX_RETRIES - retryCount)
        loginLink: data.loginLink.
});

  /* 
   //this 'if block' is replaced by the above call function.
   if (remainingTries > 0) {
    dialog.innerHTML = `
      <p>${data.message}</p>
      <p>Remaining tries: ${remainingTries}</p>
      <p>Would you like to:</p>
      <a href="#" id="exitLink" style="margin-right: 20px;">Exit</a>
      <a href="#" id="retryLink">Retry</a>
    `;
  } else {
    dialog.innerHTML = `
      <p>${data.message}</p>
      <p>Please, try again later</p>
      <a href="#" id="exitLink">Exit</a>
    `;
  }

  // Replace error element with dialog
  const errorElement = document.getElementById("errorMessage");
  errorElement.innerHTML = "";
  errorElement.appendChild(dialog);

 // ðŸ”´ Handle "Exit" click (remove from history)
  document.getElementById("exitLink").addEventListener("click", (e) => {
    e.preventDefault();
    window.location.replace(data.loginLink); // No history entry
  });

// ðŸ”´ Handle "Retry" click (re-submit the form)
if (shouldShowRetry) {
  document.getElementById("retryLink").addEventListener("click", (e) => {
    e.preventDefault();
    if (retryCount < MAX_RETRIES) {
      //retryCount++;
      //handleResetPassword(token, userId); // Retry
     //enable input.
     document.getElementById('newPassword').disabled = false;
     document.getElementById('newPassword').focus();

    // Clear the entire error message container
    errorElement.innerHTML = "";  // This will remove the dialog completely
    } else {
      // Max retries reached, show the 'Exit' link, hide the 'Retry' link.
      //window.location.href = "/login"; // Max retries reached
    }
  });
}
*/
}//end 'showPasswordReuseDialog'
////////////////////////////////////////////////////////////////////////////////////////
/**
 * Shows a standardized error/success dialog
 * @param {Object} options - Configuration object
 * @param {string} options.message - Main message to display
 * @param {number} [options.status] - HTTP status code    not used
 * @param {boolean} [options.showRetry] - Whether to show retry option (default: false)
 * @param {number} [options.remainingTries] - Remaining tries for retryable errors
 * @param {boolean} [options.isSuccess] - Whether this is a success message
 */
function showResponseDialog(options) {
  const dialog = document.createElement("div");
  dialog.style.padding = "20px";
  dialog.style.border = "1px solid #ccc";
  dialog.style.borderRadius = "5px";
  dialog.style.backgroundColor = options.isSuccess ? "#e8f5e9" : "#f9f9f9";
  //dialog.style.color = options.isSuccess ? "#2e7d32" : "#333";
  dialog.style.color = options.isSuccess ? "#00ff00" : "#ff0000";

  // Determine content based on options
  let content = `<p>${options.message}</p>`;

  if (options.showRetry && (options.remainingTries > 0)){ //!== undefined) {
    content += `
      <p>Remaining tries: ${options.remainingTries}</p>
      <p>Would you like to:</p>
      <a href="#" id="exitLink" style="margin-right: 20px;">Exit</a>
      ${options.remainingTries > 0 ? '<a href="#" id="retryLink">Retry</a>' : ''}
    `;
     dialog.innerHTML = content;
  } else {
    dialog.innerHTML = `
      <p>${options.message}</p>
      <p>Please, try again later.</p>
      <a href="#" id="exitLink">Exit</a>
    `;
    //content += `<a href="#" id="exitLink">Exit</a>`;
  }

  // Replace error element with dialog
  const messageElement = document.getElementById("errorMessage");
  messageElement.innerHTML = "";
  messageElement.appendChild(dialog);
  
  
  // Handle Exit click
  document.getElementById("exitLink").addEventListener("click", (e) => {
    e.preventDefault();
    window.location.replace(options.loginLink);
  });

  // Handle Retry click if applicable
  if (options.showRetry && options.remainingTries > 0) {
  	document.getElementById("retryLink").addEventListener("click", (e) => {
    		e.preventDefault();
    
	    // Clear the dialog immediately
	    const messageElement = document.getElementById("errorMessage");
	    messageElement.innerHTML = "";
    
	    // Case 1: Password reuse (200/success:false) - Let user modify input
	    if (options.status === 200 && options.isSuccess === false) {
	      document.getElementById('newPassword').disabled = false;
	      document.getElementById('newPassword').value = "";
	      document.getElementById('newPassword').focus();
	      document.getElementById('confirmPassword').value = "";
	    }
	    // Case 2: Server error (500) - Auto-resubmit
	    else if (options.status === 500) {
	      handleResetPassword(token, userId); // Your existing submission function
	    }
	  });
   }else{
     //here, there is not 'Retry' link. There is only 'Exit' link.
   }
}//end 'showResponseDialog'

/*
// Usage Examples:

// Case 1: Password reuse (200, success: false)
showResponseDialog({
  message: "Password matches a previous/current password",
  status: 200,
  isSuccess: false
});

// Case 2: Success (200, success: true)
showResponseDialog({
  message: "Password reset successful!",
  isSuccess: true
});

// Case 3: Client error (400/401)
showResponseDialog({
  message: "Invalid or expired token",
  status: 401
});

// Case 4: Server error (500) - with retry
showResponseDialog({
  message: "Server error occurred",
  status: 500,
  showRetry: true,
  remainingTries: MAX_RETRIES - retryCount
});
*/
////////////////////////////////////////////////////////////////////////////////////////
   </script>
 </body>
</html>
