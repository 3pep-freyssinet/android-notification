require('dotenv').config();
const jwt    = require('jsonwebtoken');
const pool   = require('./db'); 

const JWT_SECRET 		        = process.env.JWT_SECRET;
const REFRESH_TOKEN_SECRET 	= process.env.REFRESH_TOKEN_SECRET;

module.exports = (req, res, next) => {
  console.log('auth_refresh, start ...');
  //console.log("auth_refresh : req.headers : ", req.headers);
  //console.log("auth_refresh : req.headers['authorization'] : ", req.headers['authorization']);
  
  //console.log("auth_refresh : req.body.refreshToken : ", req.body.refreshToken);

  const refreshToken = req.body.refreshToken;
  console.log("auth_refresh : req.body.refreshToken : ", refreshToken);
    if (!refreshToken) {
        console.log("auth_refresh : Refresh token is required ");
        return res.status(400).json({ error: 'Refresh token is required' });
    }
  
  /*
  const refreshToken = req.headers['Authorization']?.split(' ')[1]; // Assuming Bearer token format
  console.log('auth_refresh,refreshToken : ', refreshToken);
  if (!refreshToken) {
    console.log('auth_refresh : Refresh token is missing');
    return res.status(401).json({ error: 'Refresh token is missing' });
  }
  */

  try {
    const payload = jwt.verify(refreshToken, REFRESH_TOKEN_SECRET); // Verify refresh token
    console.log('auth_refresh : payload : ', JSON.stringify(payload));
    req.user = { id: payload.id, username: payload.username }; // Attach user info from the payload
    req.refreshToken = refreshToken;
    
    next(); // Proceed to controller
  } catch (err) {
    console.log('auth_refresh : error : Invalid or expired refresh token : err : ', err);
    return res.status(403).json({ error: 'Invalid or expired refresh token' });
  }
};

//function to verify refresh token


const verifyRefreshToken = async (refreshToken) => {
    if (!refreshToken) {
        throw new Error('Refresh token is missing');
    }

    // Query the database to find the refresh token
    const result = await pool.query(
        'SELECT user_id, expires_at FROM refresh_tokens WHERE refresh_token = $1',
        [refreshToken]
    );

    if (result.rows.length === 0) {
        throw new Error('Refresh token is invalid or does not exist');
    }

    const { user_id: userId, expires_at: expiresAt } = result.rows[0];

    // Check if the token has expired
    if (new Date(expiresAt) < new Date()) {
        throw new Error('Refresh token has expired');
    }

    // Return the userId and other metadata
    return { userId, expires_at: expiresAt };
};

module.exports = { verifyRefreshToken };

